## üõ†Ô∏è Codex YAML (teljes) ‚Äì `/codex/goals/canvases/fill_canvas_event_bet_card.yaml`

```yaml
meta:
  canvas: canvases/event_bet_card.md
  priority: P1

steps:
  # 1) √öj widget l√©trehoz√°sa
  - create_file:
      target: lib/widgets/event_bet_card.dart
      content: |
        import 'dart:async';
        import 'package:flutter/material.dart';
        import 'package:tippmixapp/l10n/app_localizations.dart';
        import 'package:tippmixapp/models/odds_event.dart';
        import 'package:tippmixapp/models/odds_market.dart';
        import 'package:tippmixapp/models/odds_outcome.dart';

        class EventBetCard extends StatelessWidget {
          final OddsEvent event;
          final OddsMarket? h2hMarket;
          final void Function(OddsOutcome)? onTapHome;
          final void Function(OddsOutcome)? onTapDraw;
          final void Function(OddsOutcome)? onTapAway;
          final VoidCallback? onMoreBets;
          final VoidCallback? onStats;
          final VoidCallback? onAi;

          const EventBetCard({
            super.key,
            required this.event,
            required this.h2hMarket,
            this.onTapHome,
            this.onTapDraw,
            this.onTapAway,
            this.onMoreBets,
            this.onStats,
            this.onAi,
          });

          @override
          Widget build(BuildContext context) {
            final loc = AppLocalizations.of(context)!;

            final OddsOutcome? home = h2hMarket?.outcomes.firstWhere(
              (o) => o.name.toLowerCase() == event.homeTeam.toLowerCase(),
              orElse: () => h2hMarket!.outcomes.first,
            );
            final OddsOutcome? away = h2hMarket?.outcomes.firstWhere(
              (o) => o.name.toLowerCase() == event.awayTeam.toLowerCase(),
              orElse: () => h2hMarket!.outcomes.last,
            );
            final OddsOutcome? draw = h2hMarket?.outcomes.firstWhere(
              (o) => o.name.toLowerCase() == 'draw' || o.name.toLowerCase() == 'x',
              orElse: () => h2hMarket!.outcomes.length == 3 ? h2hMarket!.outcomes[1] : h2hMarket!.outcomes.first,
            );

            return Card(
              margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // Fels≈ë s√°v: sport c√≠mke balra, ‚Äûliga‚Äù jobbra (ha lenne)
                    Row(
                      children: [
                        const Icon(Icons.flag, size: 18),
                        const SizedBox(width: 6),
                        Expanded(
                          child: Text(
                            event.sportTitle,
                            style: Theme.of(context).textTheme.labelMedium,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                        // Jobbra igaz√≠tott liga ‚Äì jelenleg nincs megb√≠zhat√≥ adat ‚Üí kihagyjuk
                      ],
                    ),
                    const SizedBox(height: 8),

                    // Csapat sor
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        _TeamTile(name: event.homeTeam),
                        const SizedBox(width: 12),
                        _TeamTile(name: event.awayTeam, alignEnd: true),
                      ],
                    ),
                    const SizedBox(height: 8),

                    // Kezd√©si id≈ë + visszasz√°ml√°l√≥
                    Row(
                      children: [
                        Text(
                          loc.starts_at(event.commenceTime.toLocal().toString()),
                          style: Theme.of(context).textTheme.bodySmall,
                        ),
                        const Spacer(),
                        _Countdown(to: event.commenceTime),
                      ],
                    ),
                    const SizedBox(height: 12),

                    // H2H odds gombok
                    if (h2hMarket != null) Row(
                      children: [
                        Expanded(
                          child: _OddButton(
                            label: event.homeTeam,
                            odd: home?.price,
                            onPressed: home != null ? () => onTapHome?.call(home) : null,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: _OddButton(
                            label: 'X',
                            odd: draw?.price,
                            onPressed: draw != null ? () => onTapDraw?.call(draw) : null,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: _OddButton(
                            label: event.awayTeam,
                            odd: away?.price,
                            onPressed: away != null ? () => onTapAway?.call(away) : null,
                          ),
                        ),
                      ],
                    ) else
                      Padding(
                        padding: const EdgeInsets.symmetric(vertical: 8.0),
                        child: Text(loc.events_screen_no_market),
                      ),

                    const SizedBox(height: 12),

                    // Akci√≥gombok sor
                    Row(
                      children: [
                        Expanded(
                          child: OutlinedButton(
                            onPressed: onMoreBets,
                            child: Text(loc.more_bets),
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: OutlinedButton(
                            onPressed: onStats,
                            child: Text(loc.statistics),
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: OutlinedButton(
                            onPressed: onAi,
                            child: Text(loc.ai_recommendation),
                          ),
                        ),
                      ],
                    ),

                    const SizedBox(height: 6),
                    Align(
                      alignment: Alignment.centerLeft,
                      child: Text(
                        // egyszer≈± megjelen√≠t√©s (pl. ‚ÄûFriss√≠tve: most‚Äù)
                        loc.updated_time_ago(''),
                        style: Theme.of(context).textTheme.labelSmall,
                      ),
                    ),
                  ],
                ),
              ),
            );
          }
        }

        class _TeamTile extends StatelessWidget {
          final String name;
          final bool alignEnd;
          const _TeamTile({required this.name, this.alignEnd = false});
          @override
          Widget build(BuildContext context) {
            final avatar = CircleAvatar(child: Text(name.isNotEmpty ? name[0] : '?'));
            final title = Expanded(
              child: Text(
                name,
                textAlign: alignEnd ? TextAlign.right : TextAlign.left,
                style: Theme.of(context).textTheme.titleMedium,
                overflow: TextOverflow.ellipsis,
              ),
            );
            return Expanded(
              child: Row(
                mainAxisAlignment: alignEnd ? MainAxisAlignment.end : MainAxisAlignment.start,
                children: alignEnd ? [title, const SizedBox(width: 8), avatar] : [avatar, const SizedBox(width: 8), title],
              ),
            );
          }
        }

        class _OddButton extends StatelessWidget {
          final String label;
          final double? odd;
          final VoidCallback? onPressed;
          const _OddButton({required this.label, required this.odd, this.onPressed});
          @override
          Widget build(BuildContext context) {
            return ElevatedButton(
              onPressed: odd != null ? onPressed : null,
              child: Column(
                children: [
                  Text(label, overflow: TextOverflow.ellipsis),
                  const SizedBox(height: 4),
                  Text(odd?.toStringAsFixed(2) ?? '--', style: Theme.of(context).textTheme.titleMedium),
                ],
              ),
            );
          }
        }

        class _Countdown extends StatefulWidget {
          final DateTime to;
          const _Countdown({required this.to});
          @override
          State<_Countdown> createState() => _CountdownState();
        }
        class _CountdownState extends State<_Countdown> {
          late Timer _t;
          Duration _left = Duration.zero;
          @override
          void initState() {
            super.initState();
            _compute();
            _t = Timer.periodic(const Duration(seconds: 1), (_) => _tick());
          }
          void _compute() {
            final now = DateTime.now();
            setState(() {
              _left = widget.to.difference(now);
              if (_left.isNegative) _left = Duration.zero;
            });
          }
          void _tick() => _compute();
          @override
          void dispose() { _t.cancel(); super.dispose(); }
          @override
          Widget build(BuildContext context) {
            String two(int v) => v.toString().padLeft(2, '0');
            final h = two(_left.inHours);
            final m = two(_left.inMinutes % 60);
            final s = two(_left.inSeconds % 60);
            return Text('$h:$m:$s', style: Theme.of(context).textTheme.bodySmall);
          }
        }

  # 2) EventsScreen integr√°ci√≥ ‚Äì `_EventCard` helyett EventBetCard
  - patch_file:
      target: lib/screens/events_screen.dart
      patch: |
        *** Begin Patch
        *** Update File: lib/screens/events_screen.dart
        @@
-         return _EventCard(
-           key: ValueKey(event.id),
-           event: event,
-           loc: loc,
-         );
+         // Kiv√°ltjuk a bels≈ë k√°rty√°t az √∫j, √∫jrahasznos√≠that√≥ EventBetCard-dal
+         final bookmaker = event.bookmakers.isNotEmpty ? event.bookmakers.first : null;
+         final market = bookmaker?.markets.firstWhere(
+           (m) => m.key == 'h2h',
+           orElse: () => bookmaker?.markets.isNotEmpty == true ? bookmaker!.markets.first : null,
+         );
+         return EventBetCard(
+           key: ValueKey(event.id),
+           event: event,
+           h2hMarket: market,
+           onTapHome: (outcome) {
+             ScaffoldMessenger.of(context).showSnackBar(
+               SnackBar(content: Text('${outcome.name} @ ${outcome.price.toStringAsFixed(2)}')),
+             );
+           },
+           onTapDraw: (outcome) {
+             ScaffoldMessenger.of(context).showSnackBar(
+               SnackBar(content: Text('X @ ${outcome.price.toStringAsFixed(2)}')),
+             );
+           },
+           onTapAway: (outcome) {
+             ScaffoldMessenger.of(context).showSnackBar(
+               SnackBar(content: Text('${outcome.name} @ ${outcome.price.toStringAsFixed(2)}')),
+             );
+           },
+           onMoreBets: () {
+             ScaffoldMessenger.of(context).showSnackBar(
+               SnackBar(content: Text(loc.more_bets)),
+             );
+           },
+           onStats: () {
+             ScaffoldMessenger.of(context).showSnackBar(
+               SnackBar(content: Text(loc.statistics)),
+             );
+           },
+           onAi: () {
+             ScaffoldMessenger.of(context).showSnackBar(
+               SnackBar(content: Text(loc.ai_recommendation)),
+             );
+           },
+         );
        @@
- class _EventCard extends StatelessWidget {
-   final OddsEvent event;
-   final AppLocalizations loc;
-   const _EventCard({super.key, required this.event, required this.loc});
-   @override
-   Widget build(BuildContext context) {
-     final bookmaker = event.bookmakers.isNotEmpty ? event.bookmakers.first : null;
-     if (bookmaker == null) {
-       return Card(
-         child: ListTile(
-           title: Text('${event.homeTeam} ‚Äì ${event.awayTeam}'),
-           subtitle: Text(loc.events_screen_no_bookmaker),
-         ),
-       );
-     }
-     if (bookmaker.markets.isEmpty) {
-       return Card(
-         child: ListTile(
-           title: Text('${event.homeTeam} ‚Äì ${event.awayTeam}'),
-           subtitle: Text(loc.events_screen_no_market),
-         ),
-       );
-     }
-     final market = bookmaker.markets.firstWhere(
-       (m) => m.key == 'h2h',
-       orElse: () => bookmaker.markets.first,
-     );
-     return Card(
-       child: Column(
-         crossAxisAlignment: CrossAxisAlignment.start,
-         children: [
-           ListTile(
-             title: Text('${event.homeTeam} ‚Äì ${event.awayTeam}'),
-             subtitle: Text(
-               loc.events_screen_start_time(event.commenceTime.toString()),
-             ),
-           ),
-           Row(
-             children: market.outcomes.map((outcome) {
-               return Expanded(
-                 child: Padding(
-                   padding: const EdgeInsets.all(4.0),
-                   child: ElevatedButton(
-                     onPressed: () {},
-                     child: Column(
-                       children: [
-                         Text(outcome.name),
-                         const SizedBox(height: 4),
-                         Text(outcome.price.toStringAsFixed(2)),
-                       ],
-                     ),
-                   ),
-                 ),
-               );
-             }).toList(),
-           ),
-         ],
-       ),
-     );
-   }
- }
+ // A r√©gi, bels≈ë _EventCard elt√°vol√≠tva ‚Äì helyette EventBetCard haszn√°lata
        *** End Patch

  # 3) L10n: √∫j kulcsok hozz√°ad√°sa mindh√°rom ARB-hez
  - patch_file:
      target: lib/l10n/app_hu.arb
      patch: |
        *** Begin Patch
        *** End Patch
  - patch_file:
      target: lib/l10n/app_en.arb
      patch: |
        *** Begin Patch
        *** End Patch
  - patch_file:
      target: lib/l10n/app_de.arb
      patch: |
        *** Begin Patch
        *** End Patch

  # 4) L10n gener√°l√°s
  - run: flutter gen-l10n

  # 5) Widget teszt
  - create_file:
      target: test/widgets/event_bet_card_test.dart
      content: |
        import 'package:flutter/material.dart';
        import 'package:flutter_test/flutter_test.dart';
        import 'package:tippmixapp/models/odds_event.dart';
        import 'package:tippmixapp/models/odds_bookmaker.dart';
        import 'package:tippmixapp/models/odds_market.dart';
        import 'package:tippmixapp/models/odds_outcome.dart';
        import 'package:tippmixapp/widgets/event_bet_card.dart';

        Widget _wrap(Widget child) => MaterialApp(home: Scaffold(body: child));

        void main() {
          testWidgets('EventBetCard renders and buttons work', (tester) async {
            final event = OddsEvent(
              id: 'ev1', sportKey: 'soccer', sportTitle: 'Soccer',
              homeTeam: 'Liverpool', awayTeam: 'Tottenham',
              commenceTime: DateTime.now().add(const Duration(minutes: 5)),
              bookmakers: [
                OddsBookmaker(
                  key: 'test', title: 'Test', lastUpdate: DateTime.now(),
                  markets: [
                    OddsMarket(
                      key: 'h2h', lastUpdate: DateTime.now(),
                      outcomes: [
                        OddsOutcome(name: 'Liverpool', price: 1.72),
                        OddsOutcome(name: 'Draw', price: 4.00),
                        OddsOutcome(name: 'Tottenham', price: 4.50),
                      ],
                    ),
                  ],
                )
              ],
            );

            bool tapped = false;
            await tester.pumpWidget(_wrap(EventBetCard(
              event: event,
              h2hMarket: event.bookmakers.first.markets.first,
              onTapHome: (_) => tapped = true,
              onTapDraw: (_) {},
              onTapAway: (_) {},
              onMoreBets: () {},
              onStats: () {},
              onAi: () {},
            )));

            expect(find.text('Liverpool'), findsOneWidget);
            expect(find.text('Tottenham'), findsOneWidget);
            expect(find.text('1.72'), findsOneWidget);
            expect(find.text('4.00'), findsOneWidget);
            expect(find.text('4.50'), findsOneWidget);

            await tester.tap(find.text('Liverpool'));
            await tester.pump();
            // a label-tap √∂nmag√°ban nem el√©g ‚Äì a gombon bel√ºl b√°rhova tapolunk
            await tester.tap(find.byType(ElevatedButton).first);
            expect(tapped, isTrue);
          });
        }

  # 6) Elemz√©s √©s tesztfuttat√°s
  - run: flutter analyze
  - run: flutter test
```
