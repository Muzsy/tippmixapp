# Codex Canvas Yaml Guide szerinti séma
# Ez a YAML a "canvases/firestore_functions_step4_ops_scaling_testing.md" vásznat tölti ki.

canvas: "canvases/firestore_functions_step4_ops_scaling_testing.md"
version: 1
steps:
  - name: daily_bonus – paging + strukturált logolás
    outputs:
      - path: tippmixapp-main/cloud_functions/src/daily_bonus.ts
        type: unified_diff
        content: |
          --- tippmixapp-main/cloud_functions/src/daily_bonus.ts
          +++ tippmixapp-main/cloud_functions/src/daily_bonus.ts
          @@
-          import { onSchedule } from 'firebase-functions/v2/scheduler';
+          import { onSchedule } from 'firebase-functions/v2/scheduler';
+          import * as logger from 'firebase-functions/logger';
           import { db } from './lib/firebase';
           import { CoinService } from './services/CoinService';
           
-          export const daily_bonus = onSchedule({ schedule: '5 0 * * *', timeZone: 'Europe/Budapest' }, async () => {
-              const usersSnap = await db.collection('users').get();
-              const bonusCoins = 50;
-              const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');
-              const refId = `daily_bonus_${today}`;
-              for (const doc of usersSnap.docs) {
-                const uid = doc.id;
-                await new CoinService().credit(uid, bonusCoins, refId);
-              }
-          });
+          export const daily_bonus = onSchedule({ schedule: '5 0 * * *', timeZone: 'Europe/Budapest' }, async () => {
+            const PAGE = 200;
+            const bonusCoins = 50;
+            const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');
+            const refId = `daily_bonus_${today}`;
+            let lastDoc: FirebaseFirestore.QueryDocumentSnapshot | undefined;
+            let total = 0;
+            while (true) {
+              const q = lastDoc
+                ? db.collection('users').orderBy('__name__').startAfter(lastDoc.id).limit(PAGE)
+                : db.collection('users').orderBy('__name__').limit(PAGE);
+              const snap = await q.get();
+              if (snap.empty) break;
+              for (const doc of snap.docs) {
+                const uid = doc.id;
+                try {
+                  await new CoinService().credit(uid, bonusCoins, refId);
+                  total++;
+                } catch (e: any) {
+                  logger.error('daily_bonus.credit_failed', { uid, refId, error: e?.message || String(e) });
+                }
+              }
+              lastDoc = snap.docs[snap.docs.length - 1];
+              logger.info('daily_bonus.page_done', { processed: total });
+            }
+            logger.info('daily_bonus.completed', { total });
+          });

  - name: match_finalizer – retry engedélyezése + logok
    outputs:
      - path: tippmixapp-main/cloud_functions/index.ts
        type: unified_diff
        content: |
          --- tippmixapp-main/cloud_functions/index.ts
          +++ tippmixapp-main/cloud_functions/index.ts
          @@
-          import { setGlobalOptions } from 'firebase-functions/v2/options';
+          import { setGlobalOptions } from 'firebase-functions/v2/options';
           import { defineSecret } from 'firebase-functions/params';
           import { onMessagePublished } from 'firebase-functions/v2/pubsub';
+          import * as logger from 'firebase-functions/logger';
           import { match_finalizer as matchFinalizerHandler } from './src/match_finalizer';
           @@
-          export const match_finalizer = onMessagePublished({ topic: 'result-check', secrets: [API_FOOTBALL_KEY] }, async (event) => {
+          export const match_finalizer = onMessagePublished({ topic: 'result-check', secrets: [API_FOOTBALL_KEY], retry: true }, async (event) => {
+            logger.info('match_finalizer.start');
             const msg = {
               data: event.data.message?.data,
               attributes: event.data.message?.attributes as { [key: string]: string } | undefined,
             };
-            await matchFinalizerHandler(msg as any);
+            try {
+              await matchFinalizerHandler(msg as any);
+              logger.info('match_finalizer.success');
+            } catch (e: any) {
+              logger.error('match_finalizer.error', { error: e?.message || String(e) });
+              throw e; // engedjük a retry-t
+            }
           });

  - name: match_finalizer handler – strukturált logok
    outputs:
      - path: tippmixapp-main/cloud_functions/src/match_finalizer.ts
        type: unified_diff
        content: |
          --- tippmixapp-main/cloud_functions/src/match_finalizer.ts
          +++ tippmixapp-main/cloud_functions/src/match_finalizer.ts
          @@
+          import * as logger from 'firebase-functions/logger';
          @@
-          export async function match_finalizer(msg: { data: Buffer, attributes?: Record<string,string> }) {
-            // ... eredeti logika ...
-          }
+          export async function match_finalizer(msg: { data: Buffer, attributes?: Record<string,string> }) {
+            logger.info('match_finalizer.handle', { hasData: !!msg?.data, attrKeys: Object.keys(msg.attributes || {}) });
+            try {
+              // ... eredeti logika ...
+            } catch (e: any) {
+              logger.error('match_finalizer.handle_error', { error: e?.message || String(e) });
+              throw e;
+            }
+          }

  - name: coin_trx – strukturált logok
    outputs:
      - path: tippmixapp-main/cloud_functions/coin_trx.logic.ts
        type: unified_diff
        content: |
          --- tippmixapp-main/cloud_functions/coin_trx.logic.ts
          +++ tippmixapp-main/cloud_functions/coin_trx.logic.ts
          @@
+          import * as logger from 'firebase-functions/logger';
          @@
-              const result = await svc.process(userId, type, amount, transactionId);
-              return { success: true, balance: result.after };
+              const result = await svc.process(userId, type, amount, transactionId);
+              logger.info('coin_trx.success', { uid: userId, type, amount, transactionId, after: result.after });
+              return { success: true, balance: result.after };
           }
           catch (e: any) {
-            throw new HttpsError('internal', e?.message || 'Unknown error');
+            logger.error('coin_trx.error', { uid: context?.auth?.uid, type, amount, transactionId, error: e?.message || String(e) });
+            throw new HttpsError('internal', e?.message || 'Unknown error');
           }

  - name: log_coin – export kivezetése (deployból kivesszük)
    outputs:
      - path: tippmixapp-main/cloud_functions/index.ts
        type: unified_diff
        content: |
          --- tippmixapp-main/cloud_functions/index.ts
          +++ tippmixapp-main/cloud_functions/index.ts
          @@
-          export { log_coin } from './log_coin';
+          // log_coin kivezetve (Step4) – végleges törléshez futtasd egyszer: 
+          // firebase functions:delete log_coin --region=europe-central2 --force

  - name: Firestore indexek – ledger cg type+createdAt
    outputs:
      - path: tippmixapp-main/firestore.indexes.json
        type: file
        content: |
          {
            "indexes": [
              {
                "collectionGroup": "ledger",
                "queryScope": "COLLECTION_GROUP",
                "fields": [
                  { "fieldPath": "type", "order": "ASCENDING" },
                  { "fieldPath": "createdAt", "order": "DESCENDING" }
                ]
              }
            ],
            "fieldOverrides": []
          }

  - name: E2E smoke/idempotencia teszt – bonus claim
    outputs:
      - path: tippmixapp-main/cloud_functions/test/bonus_claim.e2e.test.ts
        type: file
        content: |
          /** @jest-environment node */
          import { initializeTestEnvironment } from '@firebase/rules-unit-testing';
          import * as fs from 'fs';
          
          describe('claim_daily_bonus – idempotencia', () => {
            it('second call should be blocked by cooldown/idempotency', async () => {
              // Ez egy váz: a projekt jelenlegi test setupjához illeszd az initet
              expect(true).toBe(true);
            });
          });

post:
  - note: "A log_coin végleges törléséhez egyszer futtasd: firebase functions:delete log_coin --region=europe-central2 --force"
  - note: "Az indexek deploy‑ja: firebase deploy --only firestore:indexes"
