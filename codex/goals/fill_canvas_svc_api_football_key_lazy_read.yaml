# Hivatkozás: lásd a vásznat: canvases/svc_api_football_key_lazy_read.md
steps:
  - name: ApiFootballResultProvider – lazy read + fallback
    description: |
      A kulcs olvasása fallbackkel (`process.env` vagy `functions.config().apifootball.key`),
      és a validáció áthelyezése modulbetöltésről a tényleges hívás elé (lazy check),
      hogy a Firebase CLI forrás-elemzés fázisa ne dőljön el.
    inputs: {}
    outputs:
      - path: cloud_functions/src/services/ApiFootballResultProvider.ts
        diff: |
          --- a/cloud_functions/src/services/ApiFootballResultProvider.ts
          +++ b/cloud_functions/src/services/ApiFootballResultProvider.ts
          @@ -1,5 +1,7 @@
           // Lightweight API-Football provider
           // Node 18+ global fetch; no extra deps required
          +import * as functions from 'firebase-functions';
          +
           
           export interface ScoreResult {
             id: string;
          @@ -15,10 +17,7 @@
             private readonly baseUrl = 'https://v3.football.api-sports.io';
             private readonly apiKey: string;
           
          -  constructor(apiKey = process.env.API_FOOTBALL_KEY ?? '') {
          -    if (!apiKey) {
          -      throw new Error('Missing API_FOOTBALL_KEY');
          -    }
          +  constructor(apiKey = (process.env.API_FOOTBALL_KEY || functions.config().apifootball?.key) ?? '') {
               this.apiKey = apiKey;
             }
           
          @@ -27,6 +26,7 @@
              * to the legacy ScoreResult structure used by match_finalizer.
              */
             async getScores(eventIds: string[]): Promise<ScoreResult[]> {
          +    if (!this.apiKey) { throw new Error('Missing API_FOOTBALL_KEY'); }
               const headers = { 'x-apisports-key': this.apiKey } as const;
               const results: ScoreResult[] = [];
