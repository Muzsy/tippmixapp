rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ——— SEGÉDFÜGGVÉNYEK ——— */
    function signedIn()      { return request.auth != null; }
    function isOwner(userId) { return signedIn() && request.auth.uid == userId; }

    /* ——— coin\_logs ——— */
    match /coin\_logs/{logId} {
      // helper: bejelentkezett?
      function authed() { return request.auth != null; }

      // Engedélyezett típusok
      function validType() { return request.resource.data.type in ['bet','deposit','withdraw','adjust']; }

      // CREATE: saját userId, fix mezők, createdAt timestamp
      function createShapeOK() {
        return authed()
          && request.resource != null
          && request.resource.data != null
          && request.resource.data.keys().hasOnly(['userId','amount','type','createdAt'])
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.amount is int
          && validType()
          && request.resource.data.createdAt is timestamp;
      }

      // UPDATE: csak tulaj, és csak "ártalmatlan" mezők változhatnak (példa: meta, read)
      function updateShapeOK() {
        return authed()
          && resource.data.userId == request.auth.uid
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['meta','read'])
          && !( 'userId' in request.resource.data )
          && !( 'amount' in request.resource.data )
          && !( 'type' in request.resource.data )
          && !( 'createdAt' in request.resource.data );
      }

      // READ: csak a tulajdonos
      allow read: if authed() && resource.data.userId == request.auth.uid;

      // CREATE/UPDATE jogok
      allow create: if createShapeOK();
      allow update: if updateShapeOK();

      // Törlés tiltva
      allow delete: if false;
    }

    // user dokumentum
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // subcollection
      match /settings/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }



    /* ——— badges (publikus read) ——— */
    match /badges/{badgeId} {
      allow read:  if true;
      allow write: if false;
    }

    /* ——— notifications ——— */
    match /notifications/{userId}/n/{notifId} {
      allow create: if false;
      allow read:   if isOwner(userId);
      allow update: if isOwner(userId)
        && request.resource != null
        && request.resource.data.read == true;
      allow delete: if false;
    }

    /* ——— relations (followers & friends) ——— */
    match /relations/{uid} {
      match /followers/{followerUid} {
        allow create: if signedIn() && request.auth.uid == followerUid;
        allow delete: if signedIn() && request.auth.uid == followerUid;
        allow read: if true;
        allow update: if false;
      }

      match /friendRequests/{requestId} {
        allow create: if signedIn()
          && request.resource.data.fromUid == request.auth.uid;
        allow read: if signedIn()
          && (request.auth.uid == resource.data.fromUid
              || request.auth.uid == resource.data.toUid);
        allow update: if signedIn()
          && request.resource.data.accepted == true
          && request.auth.uid == resource.data.toUid;
        allow delete: if false;
      }
    }
  }
}
