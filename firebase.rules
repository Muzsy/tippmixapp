rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ——— SEGÉDFÜGGVÉNYEK ——— */
    function signedIn()      { return request.auth != null; }
    function isOwner(userId) { return signedIn() && request.auth.uid == userId; }
    // ÚJ: kliens oldali ticket create ellenőrzéshez
    function isValidTicketCreate(data) {
      // Kötelező: ownerId == saját uid és kezdeti státusz 'pending'
      return data.ownerId == request.auth.uid
             && data.status == 'pending';
    }
    // ÚJ: olvasásnál védelem – csak a saját ticket olvasható
    function canReadTicket(resourceData) {
      return signedIn() && resourceData.ownerId == request.auth.uid;
    }

    match /system_configs/{key} {
      allow read: if true;
      allow write: if false;
    }

    /*  ─── Felhasználói beállítások alkollekció ───  */
    match /users/{userId}/settings/{settingId} {
      allow read, write: if isOwner(userId);
    }

    /* --- public_feed --- */
    match /public_feed/{postId} {
      // Bárki bejelentkezett olvashat.
      allow read: if signedIn();
      // Létrehozni csak saját userként lehet (FeedService ír bejegyzést).
      allow create: if signedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;

      // Moderation reports subcollection
      match /reports/{reportId} {
        allow create: if signedIn() && request.resource.data.userId == request.auth.uid;
        allow read, update, delete: if false;
      }
    }

    /* --- moderation_reports (legacy path) --- */
    match /moderation_reports/{reportId} {
      allow create: if signedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if false;
    }

    /* --- users/{uid}/badges subcollection --- */
    match /users/{userId}/badges/{badgeId} {
      allow read: if signedIn();
      allow create: if isOwner(userId);
      allow update, delete: if false;
    }

    /* --- copied_bets --- */
    match /copied_bets/{userId} {
      allow read, write: if isOwner(userId);
      allow delete: if false;
    }

    /* ——— badges (public read) ——— */
    match /badges/{badgeId} {
      allow read: if true;
    }

    /* ——— leaderboards ——— */
    match /leaderboards/{periodId} {
      allow read: if true;
      allow write, delete: if false;
    }

    /* ——— users collection ——— */
    match /users/{userId} {
      allow create: if signedIn() && request.auth.uid == userId;
      // Ranglistához minden hitelesített user olvashatja
      allow read:   if signedIn();
      allow update: if isOwner(userId);
      allow delete: if false;

      /* ——— subcollection: notifications ——— */
      match /notifications/{notifId} {
        allow create: if false;
        allow read:   if isOwner(userId);
        allow update: if isOwner(userId) && request.resource.data.read == true;
        allow delete: if false;
      }

      /* ——— subcollection: friendRequests ——— */
      match /friendRequests/{requestId} {
        allow create: if signedIn() && request.resource.data.fromUid == request.auth.uid;
        allow read:   if signedIn() && (request.auth.uid == resource.data.fromUid || request.auth.uid == resource.data.toUid);
        allow update: if signedIn() && request.resource.data.accepted == true && request.auth.uid == resource.data.toUid;
        allow delete: if false;
      }

      /* --- bonus state doc --- */
      match /bonus_state {
        allow read: if isOwner(userId);
        allow write: if false;
      }
    }

    /* --- NEW: user-centric wallet & ledger (SoT) --- */
    match /users/{uid}/wallet {
      allow read: if isOwner(uid);
      allow write: if false; // Only via CF (Admin SDK)
    }
    match /users/{uid}/ledger/{entryId} {
      allow read: if isOwner(uid);
      allow write: if false; // Only via CF (Admin SDK)
    }

    /* --- tickets gyökérkollekció --- */
    match /tickets/{ticketId} {
      // Olvasás: csak a saját szelvény olvasható
      allow read: if canReadTicket(resource.data);
      // Létrehozás: csak saját névben, csak pending státusszal
      allow create: if signedIn() && isValidTicketCreate(request.resource.data);
      // Módosítás/törlés: tilos kliensről (Admin SDK/CF kezeli)
      allow update, delete: if false;
    }

    /* --- users/{userId}/tickets alkollekció --- */
    match /users/{userId}/tickets/{ticketId} {
      // Olvasás: a saját szelvényeidet láthatod
      allow read: if isOwner(userId);
      // Létrehozás: csak a saját nevedben és csak kezdeti 'pending' státusszal
      allow create: if isOwner(userId)
        && request.resource.data.userId == userId
        && request.resource.data.status == 'pending';
      // Módosítás/törlés: kliensről tiltott (Admin SDK/CF végzi)
      allow update, delete: if false;
    }

    /* ——— relations (followers & friends) ——— */
    match /relations/{uid} {
      match /followers/{followerUid} {
        allow create, delete: if signedIn() && request.auth.uid == followerUid;
        allow read: if true;
        allow update: if false;
      }

      match /following/{targetUid} {
        allow create, delete: if signedIn() && request.auth.uid == uid;
        allow read: if true;
        allow update: if false;
      }
    }

    /* ——— badgesProgress ——— */
    match /badgesProgress/{uid} {
      allow read: if isOwner(uid);
      allow write, delete: if false;
    }

    /* ——— misc public collections ——— */
    match /appConfig/{docId} {
      allow read: if true;
      allow write, delete: if false;
    }
  }
}
